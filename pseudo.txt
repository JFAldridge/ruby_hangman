Game introduction
  "Welcome to hangman"
  Explain rules
  Explain saves
  "Begin new game or continue from save?"
  Game.new or
  
end



Game
  create new instance of Game class
    @letters_of_hidden_word = create_hidden_word_arr
    @letters_of_guessed_word = Array.new(@letters_of_hidden_word.length, "_")
    @letters_not_yet_guessed = ("a".."z").to_a
    @turns_allotted = how_difficult
    @turns_played = 0
    play_game

def play

end

def play_game
  game_status = "playing"
  while game_status == "playing"
  (@turns_allotted).times do
    show_board
    show_guess_count
    letter_guess
    game_status = "won" if win_check(win)
    game_status = "lost" if @turns_played == @turns_allotted
  end
end

def show_board
  hangman_progress(@turns_allotted, @turns_played)
  puts @letters_of_guessed_word.join(" ")
end

def show_guess_count
  if @turns_played == 0
    "You have #{@turns_allotted} guesses.  Good luck!"
  else
    "You have #{@turns_allotted} left."
  end
end

def letter_guess
  letter = ""
  while letter = ""
    "Please pick a letter."
    guess = gets.chomp.downcase
    letter = guess if check if input is letter
  end
  check_letter_against_hidden_word(letter)
end

def check_letter_against_hidden_word(letter)
  letter_found = false
  @letters_of_hidden_word.each_with_index do |let, i|
    if let == letter
      @letters_of_guessed_word[i] = letter
      letter_found = true
    end
  end
  inform_if_letter_was_found(letter_found)
end

def inform_if_letter_was_found(letter_found)
  puts letter_found ? "You found a letter!" : "Letter not found.  Try again!"
end

def win_check
  @letters_of_guessed_word.none {|let| let == "_"} 
end

def create_hidden_word
  dictionary = []
  File.foreach("5desk.txt"){ |line| dictionary << line}

  hidden_word = ""
  hidden_word = dictionary.sample until [5..12].include?(hidden_word.length)
  hidden_word.split("")
end

def how_difficult
  "Would you like the game easy, medium, or hard?"
  3.times do
    if "easy"
      return 7
    elsif "medium"
      return 6
    elsif "hard"
      return 5
    "Enter either "easy", "medium", or "hard".
  end
  "Lets start with easy."
  return 7
end